#include <iostream>


struct Node {
    int vertex;
    Node* next;
};

struct Graph {
    int numVertices;
    Node** adjLists;
};

Node* createNode(int vertex) {
    Node* newNode = new Node();
    newNode->vertex = vertex;
    newNode->next = nullptr;
    return newNode;
}

Graph* createGraph(int vertices) {
    Graph* graph = new Graph();
    graph->numVertices = vertices;

    graph->adjLists = new Node * [vertices];

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = nullptr;
    }

    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

void DFSD(Graph* graph, int vertex, int* DIST, int depth) {
    DIST[vertex] = depth;
    std::cout << "Расстояние от начальной вершины до вершины " << vertex << " = " << DIST[vertex] << "\n";

    Node* temp = graph->adjLists[vertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (DIST[adjVertex] == -1) {
            DFSD(graph, adjVertex, DIST, depth + 1);
        }
        temp = temp->next;
    }
}

void DFS(Graph* graph, int start) {
    int n = graph->numVertices;
    int* DIST = new int[n];
    for (int i = 0; i < n; i++) {
        DIST[i] = -1;
    }

    DFSD(graph, start, DIST, 0);

    for (int i = 0; i < n; i++) {
        if (DIST[i] == -1) {
            std::cout << "Вершина " << i << " недоступна из вершины " << start << "\n";
        }
    }

    delete[] DIST;
}

int main() {
    setlocale(LC_ALL, "Rus");
    int vertices = 10; // количество вершин
    Graph* graph = createGraph(vertices);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2); // ребро между 1 и 2
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    addEdge(graph, 4, 5);
    addEdge(graph, 5, 7);
    addEdge(graph, 2, 8);

    std::cout << "Обход в глубину начиная с вершины 0:\n";
    DFS(graph, 0);
    std::cout << "\n";

    for (int i = 0; i < vertices; i++) {
        Node* adjList = graph->adjLists[i];
        while (adjList != nullptr) {
            Node* temp = adjList;
            adjList = adjList->next;
            delete temp;
        }
    }
    delete[] graph->adjLists;
    delete graph;

    return 0;
}
