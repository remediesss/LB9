#include <iostream>
#include <cstdlib>
#include <ctime>

#define MAX_VERTICES 100

void generate_adjacency_matrix(int n, int matrix[MAX_VERTICES][MAX_VERTICES]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = 0;
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int edge = rand() % 2;
            matrix[i][j] = edge;
            matrix[j][i] = edge;
        }
    }
}

void DFSD(int v, int n, int matrix[MAX_VERTICES][MAX_VERTICES], int DIST[MAX_VERTICES], int depth) {
    DIST[v] = depth; // depth = расстояние

    for (int i = 0; i < n; i++) {
        if (matrix[v][i] == 1 && DIST[i] == -1) {
            DFSD(i, n, matrix, DIST, depth + 1);
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    int n;

    while (1) {
        std::cout << "Введите размер матрицы: ";
        std::cin >> n;

        if (n <= 0) {
            break;
        }

        int matrix[MAX_VERTICES][MAX_VERTICES];
        int DIST[MAX_VERTICES];

        srand((unsigned)time(NULL));

        generate_adjacency_matrix(n, matrix);

        std::cout << "Матрица смежности:\n";
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                std::cout << matrix[i][j] << " ";
            }
            std::cout << "\n";
        }

        for (int i = 0; i < n; i++) {
            DIST[i] = -1; 
        }

        DFSD(0, n, matrix, DIST, 0); 

        std::cout << "Расстояния от вершины 0:\n";
        for (int i = 0; i < n; i++) {
            if (DIST[i] == -1) {
                std::cout << "Вершина " << i << ": недоступна\n";
            }
            else {
                std::cout << "Вершина " << i << ": " << DIST[i] << "\n";
            }
        }
    }
    return 0;
}
